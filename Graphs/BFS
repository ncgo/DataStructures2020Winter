//
//  BFS.cpp
//  BFS
//
//  Created by Nadia Garcia on 04/02/20.
//  Copyright Â© 2020 Nadia Garcia. All rights reserved.
//

#include <iostream>
#include <queue>

using namespace std;

#define N 10

void initMatAdj( bool matAdj[N][N] ) {
    for( int i = 0; i < N; i++ ) {
        for( int j = 0; j < N; j++ ) {
            matAdj[i][j] = false;
        }
    }
}

void leeMatAdj( bool matAdj[N][N], int e ) {
    int origen, destino;
    for ( int i = 0; i < N; i++ ) {
        cin >> origen >> destino;
        matAdj[origen - 1][destino - 1] = true;
        matAdj[destino - 1][origen - 1] = true;
    }
}

void printMat( bool matAdj[N][N], int v ) {
    for ( int i = 0; i < v; i++ ) {
        cout << i + 1 << "\t";
        for ( int j = 0; j < v; j++ ) {
            cout << ( matAdj[i][j] ? "T" : "F" ) << " \t";
        }
        cout << endl;
    }
}


void BFS( bool matAdj[N][N], int v ) {
    queue <int> fila;
    vector <bool> status( v, false );
    
    int data;
    fila.push( 0 );
    status[ 0 ] = true;
    while( !fila.empty() ) {
        data = fila.front();
        fila.pop();
        cout << ( data + 1 ) << " ";
        for( int i = 0; i < v; i++ ) {
            if( !status[i] && matAdj[data][i] ) {
                status[i] = true;
                fila.push(i);
            }
        }
    }
    cout << endl;
}

int main() {
    bool matAdj[N][N];
    int v, e;
    
    cin >> v >> e;
    
    initMatAdj( matAdj );
    leeMatAdj( matAdj, e);
    cout << endl;
    printMat( matAdj, v);
    
    BFS( matAdj, v);
    
    return 0;
}
